---
interface Props {
	title: string;
	date: string;
	excerpt: string;
	href: string;
	image: string;
	category: string;
}

const { href, title, date, excerpt, image, category } = Astro.props;

const categoryColor = category === 'Breaking' ? 'var(--danger)' : 'var(--text)';
const isBreaking = category === 'Breaking';
---

<article class="article-card">
	<a href={href}>
		<div class="card-image">
			<div class="cyber-image" style={`background-image: url(${image})`}>
				<div class="glitch-effect"></div>
				<div class="image-overlay"></div>
			</div>
		</div>
		<div class="content">
			<div class="meta">
				<time datetime={date}>{date}</time>
				<span class="separator">|</span>
				<span class={`category ${isBreaking ? 'breaking' : ''}`}>{category}</span>
			</div>
			<h2>{title}</h2>
			<p>{excerpt}</p>
			<span class="read-more">Read Full Report â†’</span>
		</div>
	</a>
</article>

<style>
	.article-card {
		border: 1px solid var(--accent);
		background: rgba(26, 26, 26, 0.5);
		transition: all 0.3s ease;
		position: relative;
		overflow: hidden;
	}

	.article-card::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.05));
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	.article-card:hover {
		transform: translateY(-4px);
		border-color: var(--text);
	}

	.article-card:hover::before {
		opacity: 1;
	}

	.card-image {
		height: 200px;
		overflow: hidden;
		position: relative;
	}

	.cyber-image {
		width: 100%;
		height: 100%;
		background-size: cover;
		background-position: center;
		position: relative;
	}

	.glitch-effect {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: linear-gradient(
			transparent 0%,
			rgba(255, 255, 255, 0.1) 50%,
			transparent 100%
		);
		animation: glitch 2s infinite;
		opacity: 0.5;
	}

	.image-overlay {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: linear-gradient(
			to bottom,
			transparent 0%,
			rgba(0, 0, 0, 0.8) 100%
		);
	}

	.content {
		padding: 2rem;
	}

	.article-card a {
		color: var(--text);
		text-decoration: none;
		position: relative;
		z-index: 1;
	}

	.meta {
		margin-bottom: 1rem;
		font-size: 0.9rem;
		font-family: monospace;
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.meta time {
		color: var(--text);
	}

	.separator {
		color: var(--accent);
	}

	.category {
		color: var(--text);
		font-weight: bold;
		text-transform: uppercase;
		letter-spacing: 1px;
		font-size: 0.8rem;
	}

	.category.breaking {
		color: var(--danger);
		animation: blink 2s ease-in-out infinite;
	}

	@keyframes blink {
		0%, 100% {
			opacity: 1;
		}
		50% {
			opacity: 0.5;
		}
	}

	h2 {
		font-size: 1.5rem;
		margin-bottom: 1rem;
		line-height: 1.4;
	}

	p {
		color: #aaa;
		margin-bottom: 1.5rem;
		line-height: 1.6;
	}

	.read-more {
		color: var(--text);
		font-weight: bold;
		display: inline-flex;
		align-items: center;
		transition: transform 0.3s ease;
	}

	.article-card:hover .read-more {
		transform: translateX(10px);
	}

	@keyframes glitch {
		0% {
			transform: translateY(-100%);
		}
		100% {
			transform: translateY(100%);
		}
	}
</style>